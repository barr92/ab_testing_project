{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# User-Behavour and Sales Analysis\n",
    "\n",
    "We will now conduct a study using an AB test on the website sales funnel for a website application. Our objective is to comprehend the sequence of actions users undertake, including the various online events that occur. \n",
    "\n",
    "Furthermore, we will examine how users interact at each stage, identifying drop-off points, conversion times, retention rates, lifetime value, and the most popular events. In conclusion, we will conduct statistical tests to determine the performance of each test group and provide business recommendations based on our findings."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the libraries that we might need later on, including scipy for statistical testing\n",
    "# ploty for creating our funnel visualisation as well as matplotlib and season for distribution and frequancies\n",
    "# Pandas and Numpy will be out main libraries.\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import datetime as dt\n",
    "\n",
    "from scipy import stats as st\n",
    "from statsmodels.stats import proportion\n",
    "import math as mth\n",
    "from sklearn.datasets import load_iris\n",
    "\n",
    "import plotly.express as px\n",
    "import seaborn as sns\n",
    "\n",
    "from plotly import graph_objects as go\n",
    "import plotly.graph_objects as go\n",
    "import math as mth"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "pd.set_option(\"display.max_columns\", None)\n",
    "log_file = pd.read_csv(r\"/datasets/logs_exp_us.csv\", encoding='utf-8', sep='\\t')\n",
    "log_file.columns = ['event', 'user_id', 'timestamp', 'test_id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>test_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>4575588528974610257</td>\n",
       "      <td>1564029816</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>7416695313311560658</td>\n",
       "      <td>1564053102</td>\n",
       "      <td>246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>3518123091307005509</td>\n",
       "      <td>1564054127</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>3518123091307005509</td>\n",
       "      <td>1564054127</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>6217807653094995999</td>\n",
       "      <td>1564055322</td>\n",
       "      <td>248</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     event              user_id   timestamp  test_id\n",
       "0         MainScreenAppear  4575588528974610257  1564029816      246\n",
       "1         MainScreenAppear  7416695313311560658  1564053102      246\n",
       "2  PaymentScreenSuccessful  3518123091307005509  1564054127      248\n",
       "3         CartScreenAppear  3518123091307005509  1564054127      248\n",
       "4  PaymentScreenSuccessful  6217807653094995999  1564055322      248"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preparation\n",
    "- Rename the columns \n",
    "- Check for missing values and data types.\n",
    "- Add a date and time column and a separate column for dates "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 244126 entries, 0 to 244125\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype \n",
      "---  ------     --------------   ----- \n",
      " 0   event      244126 non-null  object\n",
      " 1   user_id    244126 non-null  int64 \n",
      " 2   timestamp  244126 non-null  int64 \n",
      " 3   test_id    244126 non-null  int64 \n",
      "dtypes: int64(3), object(1)\n",
      "memory usage: 7.5+ MB\n"
     ]
    }
   ],
   "source": [
    "log_file.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Setting datatypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-07-25 04:43:36\n",
      "7\n",
      "3\n"
     ]
    }
   ],
   "source": [
    "# Time seems to be in the incorrect format, so we need to use pd.todatetime to convert\n",
    "print(pd.to_datetime(log_file['timestamp'], unit='s').loc[0])\n",
    "print(pd.to_datetime(log_file['timestamp'], unit='s').dt.month.loc[0])\n",
    "print(pd.to_datetime(log_file['timestamp'], unit='s').dt.weekday.loc[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Date feature looks correct so I will convert all now\n",
    "log_file['timestamp'] = pd.to_datetime(log_file['timestamp'], unit='s') \n",
    "log_file['weekday'] = log_file['timestamp'].dt.weekday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_file['date'] = pd.to_datetime(log_file['timestamp'], format='%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_file['test_id'] = log_file['test_id'].astype(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>test_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>4575588528974610257</td>\n",
       "      <td>2019-07-25 04:43:36</td>\n",
       "      <td>246</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-07-25 04:43:36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>7416695313311560658</td>\n",
       "      <td>2019-07-25 11:11:42</td>\n",
       "      <td>246</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-07-25 11:11:42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>3518123091307005509</td>\n",
       "      <td>2019-07-25 11:28:47</td>\n",
       "      <td>248</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-07-25 11:28:47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>3518123091307005509</td>\n",
       "      <td>2019-07-25 11:28:47</td>\n",
       "      <td>248</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-07-25 11:28:47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>6217807653094995999</td>\n",
       "      <td>2019-07-25 11:48:42</td>\n",
       "      <td>248</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-07-25 11:48:42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     event              user_id           timestamp test_id  \\\n",
       "0         MainScreenAppear  4575588528974610257 2019-07-25 04:43:36     246   \n",
       "1         MainScreenAppear  7416695313311560658 2019-07-25 11:11:42     246   \n",
       "2  PaymentScreenSuccessful  3518123091307005509 2019-07-25 11:28:47     248   \n",
       "3         CartScreenAppear  3518123091307005509 2019-07-25 11:28:47     248   \n",
       "4  PaymentScreenSuccessful  6217807653094995999 2019-07-25 11:48:42     248   \n",
       "\n",
       "   weekday                date  \n",
       "0        3 2019-07-25 04:43:36  \n",
       "1        3 2019-07-25 11:11:42  \n",
       "2        3 2019-07-25 11:28:47  \n",
       "3        3 2019-07-25 11:28:47  \n",
       "4        3 2019-07-25 11:48:42  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Missing Values Check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event        0.0\n",
       "user_id      0.0\n",
       "timestamp    0.0\n",
       "test_id      0.0\n",
       "weekday      0.0\n",
       "date         0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.isna().mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Duplicates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>test_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>453</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>5613408041324010552</td>\n",
       "      <td>2019-07-30 08:19:44</td>\n",
       "      <td>248</td>\n",
       "      <td>1</td>\n",
       "      <td>2019-07-30 08:19:44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2350</th>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>1694940645335807244</td>\n",
       "      <td>2019-07-31 21:51:39</td>\n",
       "      <td>248</td>\n",
       "      <td>2</td>\n",
       "      <td>2019-07-31 21:51:39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3573</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>434103746454591587</td>\n",
       "      <td>2019-08-01 02:59:37</td>\n",
       "      <td>248</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-01 02:59:37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4076</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>3761373764179762633</td>\n",
       "      <td>2019-08-01 03:47:46</td>\n",
       "      <td>247</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-01 03:47:46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4803</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>2835328739789306622</td>\n",
       "      <td>2019-08-01 04:44:01</td>\n",
       "      <td>248</td>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-01 04:44:01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242329</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>8870358373313968633</td>\n",
       "      <td>2019-08-07 19:26:44</td>\n",
       "      <td>247</td>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-07 19:26:44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242332</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>4718002964983105693</td>\n",
       "      <td>2019-08-07 19:26:45</td>\n",
       "      <td>247</td>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-07 19:26:45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242360</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>2382591782303281935</td>\n",
       "      <td>2019-08-07 19:27:29</td>\n",
       "      <td>246</td>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-07 19:27:29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242362</th>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>2382591782303281935</td>\n",
       "      <td>2019-08-07 19:27:29</td>\n",
       "      <td>246</td>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-07 19:27:29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>242635</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>4097782667445790512</td>\n",
       "      <td>2019-08-07 19:36:58</td>\n",
       "      <td>246</td>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-07 19:36:58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>413 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          event              user_id           timestamp  \\\n",
       "453            MainScreenAppear  5613408041324010552 2019-07-30 08:19:44   \n",
       "2350           CartScreenAppear  1694940645335807244 2019-07-31 21:51:39   \n",
       "3573           MainScreenAppear   434103746454591587 2019-08-01 02:59:37   \n",
       "4076           MainScreenAppear  3761373764179762633 2019-08-01 03:47:46   \n",
       "4803           MainScreenAppear  2835328739789306622 2019-08-01 04:44:01   \n",
       "...                         ...                  ...                 ...   \n",
       "242329         MainScreenAppear  8870358373313968633 2019-08-07 19:26:44   \n",
       "242332  PaymentScreenSuccessful  4718002964983105693 2019-08-07 19:26:45   \n",
       "242360  PaymentScreenSuccessful  2382591782303281935 2019-08-07 19:27:29   \n",
       "242362         CartScreenAppear  2382591782303281935 2019-08-07 19:27:29   \n",
       "242635         MainScreenAppear  4097782667445790512 2019-08-07 19:36:58   \n",
       "\n",
       "       test_id  weekday                date  \n",
       "453        248        1 2019-07-30 08:19:44  \n",
       "2350       248        2 2019-07-31 21:51:39  \n",
       "3573       248        3 2019-08-01 02:59:37  \n",
       "4076       247        3 2019-08-01 03:47:46  \n",
       "4803       248        3 2019-08-01 04:44:01  \n",
       "...        ...      ...                 ...  \n",
       "242329     247        2 2019-08-07 19:26:44  \n",
       "242332     247        2 2019-08-07 19:26:45  \n",
       "242360     246        2 2019-08-07 19:27:29  \n",
       "242362     246        2 2019-08-07 19:27:29  \n",
       "242635     246        2 2019-08-07 19:36:58  \n",
       "\n",
       "[413 rows x 6 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file[log_file.duplicated()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_file = log_file.drop_duplicates()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will drop the duplicate values in the data in order to ensure they don't damage our final analysis.\n",
    "\n",
    "Based on the above grouped data we can understand the user flow on the website. It appears that Main Screen Appear is step 1 which has the most users, followed by Offers screen, then cart screen, payment screen is the 2nd the last stage and tutorial is the final converted step."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Studying the data\n",
    "\n",
    "#### Summary\n",
    "\n",
    "In the analysis, several key aspects of the log file have been addressed. Firstly, the total number of events and users, the average number of events and the correct data range has been established. A histogram plotting events against date and time has been created, this helped us to understand the date ranges by hour and day.\n",
    "\n",
    "The decision was made to focus on data from August 1st onwards to eliminate skewing effects and to ensure our data is consistent and complete. \n",
    "\n",
    "The resulting data period has been defined. The impact of excluding older data on events and users has been assessed. It was ensured that all three experimental groups are represented among users. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How many events and users are in the logs?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>timestamp</th>\n",
       "      <th>test_id</th>\n",
       "      <th>weekday</th>\n",
       "      <th>date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>243713</td>\n",
       "      <td>2.437130e+05</td>\n",
       "      <td>243713</td>\n",
       "      <td>243713</td>\n",
       "      <td>243713.000000</td>\n",
       "      <td>243713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>5</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>248</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>119101</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>85582</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.627963e+18</td>\n",
       "      <td>2019-08-04 10:19:17.987665920</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.947586</td>\n",
       "      <td>2019-08-04 10:19:17.987665920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6.888747e+15</td>\n",
       "      <td>2019-07-25 04:43:36</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2019-07-25 04:43:36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.372212e+18</td>\n",
       "      <td>2019-08-02 14:36:45</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2019-08-02 14:36:45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>4.623192e+18</td>\n",
       "      <td>2019-08-04 11:51:00</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>2019-08-04 11:51:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6.932517e+18</td>\n",
       "      <td>2019-08-06 06:56:24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2019-08-06 06:56:24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>9.222603e+18</td>\n",
       "      <td>2019-08-07 21:15:17</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2019-08-07 21:15:17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>2.642723e+18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.995046</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   event       user_id                      timestamp test_id  \\\n",
       "count             243713  2.437130e+05                         243713  243713   \n",
       "unique                 5           NaN                            NaN       3   \n",
       "top     MainScreenAppear           NaN                            NaN     248   \n",
       "freq              119101           NaN                            NaN   85582   \n",
       "mean                 NaN  4.627963e+18  2019-08-04 10:19:17.987665920     NaN   \n",
       "min                  NaN  6.888747e+15            2019-07-25 04:43:36     NaN   \n",
       "25%                  NaN  2.372212e+18            2019-08-02 14:36:45     NaN   \n",
       "50%                  NaN  4.623192e+18            2019-08-04 11:51:00     NaN   \n",
       "75%                  NaN  6.932517e+18            2019-08-06 06:56:24     NaN   \n",
       "max                  NaN  9.222603e+18            2019-08-07 21:15:17     NaN   \n",
       "std                  NaN  2.642723e+18                            NaN     NaN   \n",
       "\n",
       "              weekday                           date  \n",
       "count   243713.000000                         243713  \n",
       "unique            NaN                            NaN  \n",
       "top               NaN                            NaN  \n",
       "freq              NaN                            NaN  \n",
       "mean         2.947586  2019-08-04 10:19:17.987665920  \n",
       "min          0.000000            2019-07-25 04:43:36  \n",
       "25%          1.000000            2019-08-02 14:36:45  \n",
       "50%          3.000000            2019-08-04 11:51:00  \n",
       "75%          5.000000            2019-08-06 06:56:24  \n",
       "max          6.000000            2019-08-07 21:15:17  \n",
       "std          1.995046                            NaN  "
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.describe(include='all', datetime_is_numeric=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the table we can see that there are 243713 total events (5 unique types) and ther are about 243k sessions and 176k users."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Average events per user"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>event</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6888746892508752</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6909561520679493</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6922444491712477</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7435777799948366</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7702139951469979</td>\n",
       "      <td>137</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            user_id  event\n",
       "0  6888746892508752      1\n",
       "1  6909561520679493      5\n",
       "2  6922444491712477     47\n",
       "3  7435777799948366      6\n",
       "4  7702139951469979    137"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# looking at events per user\n",
    "events_by_user=log_file.groupby(['user_id'])['event'].count().reset_index()\n",
    "events_by_user.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    7551.000000\n",
       "mean       32.275593\n",
       "std        65.154219\n",
       "min         1.000000\n",
       "25%         9.000000\n",
       "50%        20.000000\n",
       "75%        37.000000\n",
       "max      2307.000000\n",
       "Name: event, dtype: float64"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_by_user['event'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1,2, figsize=(10,5))\n",
    "\n",
    "axes[0].boxplot(events_by_user['event'])\n",
    "axes[0].set_title('Boxplot of events by user with outliers')\n",
    "axes[1].boxplot(events_by_user['event'],showfliers=False)\n",
    "axes[1].set_title('Boxplot of events by user without outliers')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Upon visualising the above exploration, we can tell that our core dataset sits between 10 and 37 events per users and the average is 32 events per users. Anything above that is considered an outliers. Our main distrupters are considered as users who had more than 80 events records."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Time Period Analysis\n",
    "\n",
    "#### Summary\n",
    "\n",
    "The time period analysis will feature a left-skewed histogram, indicated a concentration of data in the campaign's final weeks. The starting days exhibited low activity, most likely due to preparation, sampling and testing. \n",
    "\n",
    "This is why (as briefly touched on in the summary above) we will slice the data from the 1st August to the 7th August, resulting in 1.15% of the data being lost, which won't affect our analysis. Stringent checks detect no implicit or user ID duplicates, applying methods from the \"Making Business Decisions\" project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The time period of the date is from 2019-07-25 04:43:36 to 2019-08-07 21:15:17\n"
     ]
    }
   ],
   "source": [
    "first_date = log_file['timestamp'].min()\n",
    "last_date = log_file['timestamp'].max()\n",
    "print(\"The time period of the date is from\",first_date, \"to\", last_date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Distribution of all dates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fix, axes = plt.subplots(1,2, figsize=(10,5))\n",
    "\n",
    "# Distribution by dates\n",
    "axes[0].hist(log_file['timestamp'], bins=100, edgecolor='black')\n",
    "axes[0].set_title('date distribution all dates')\n",
    "axes[0].set_xlabel('date')\n",
    "axes[0].set_ylabel('freqancy')\n",
    "axes[0].tick_params(axis='x', labelrotation=65)\n",
    "\n",
    "# Distribution by day and hour\n",
    "axes[1].hist(log_file[(log_file['timestamp']>='2019-07-31')&(log_file['timestamp']<='2019-08-02')]['timestamp'], \n",
    "         color='red', edgecolor='black', alpha=0.5, bins=100)\n",
    "axes[1].set_title('date distribution by hours')\n",
    "axes[1].set_xlabel('Date and Hours')\n",
    "axes[1].set_ylabel('frequancy')\n",
    "axes[1].tick_params(axis='x', labelrotation=65)\n",
    "\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Values from before 1st August"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.159560630741897\n"
     ]
    }
   ],
   "source": [
    "old_records = log_file[log_file['timestamp'] < '2019-08-01']\n",
    "missing_values = len(old_records) / len(log_file)*100\n",
    "print(missing_values)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The values before the 1st August made up 1.15% percent of our dataset. Below you will be able to observe the number of events and users during this time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    1451.000000\n",
      "mean        1.947622\n",
      "std         2.687393\n",
      "min         1.000000\n",
      "25%         1.000000\n",
      "50%         1.000000\n",
      "75%         2.000000\n",
      "max        39.000000\n",
      "Name: event, dtype: float64\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "old_users = old_records.groupby('user_id')['event'].count().reset_index()\n",
    "old_users.columns=['user','event']\n",
    "\n",
    "fix, axes = plt.subplots(1,2, figsize=(10,5))\n",
    "\n",
    "axes[0].boxplot(old_users['event'])\n",
    "axes[0].set_title('Old Records before 1st August')\n",
    "axes[1].hist(old_records['timestamp'], edgecolor='black')\n",
    "axes[1].set_title('Histogram of old records')\n",
    "\n",
    "print(old_users['event'].describe())\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When we look at the records before the 1st of August, there was a very low frequancy as we saw in the histograms above, thereforem I have presented a box plot of the old records to show whether there are sufficient records. However, the frequancy is increasing on the 31st July, therefore, it will be worth increasing our data range to include the last day in July and disregard the others."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MainScreenAppear           1773\n",
       "OffersScreenAppear          475\n",
       "CartScreenAppear            365\n",
       "PaymentScreenSuccessful     200\n",
       "Tutorial                     13\n",
       "Name: event, dtype: int64"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "old_records['event'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Total Sample Sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "test_id\n",
       "246    80181\n",
       "247    77950\n",
       "248    85582\n",
       "Name: user_id, dtype: int64"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.groupby('test_id')['user_id'].size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "test_id\n",
       "246    79922\n",
       "247    77686\n",
       "248    85309\n",
       "Name: user_id, dtype: int64"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filtering with our new dates\n",
    "log_fil = log_file[(log_file['timestamp']>='2019-07-31')]\n",
    "log_fil.groupby('test_id')['user_id'].size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After filtering by date we are left with 99.67% in our AB testing dataframe.\n"
     ]
    }
   ],
   "source": [
    "percent_of_data = len(log_fil) / len(log_file)\n",
    "print(\"After filtering by date we are left with {:.2%} in our AB testing dataframe.\".format(percent_of_data))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Check for implicit duplicate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n"
     ]
    }
   ],
   "source": [
    "both_groups = log_file.groupby('user_id').agg({'test_id': 'nunique'}).reset_index()\n",
    "both_groups.columns = ['user_id', 'test_id']\n",
    "both_groups = both_groups[both_groups['test_id'] != 1]\n",
    "duplicate_visitors = both_groups['user_id'].to_list()\n",
    "print(duplicate_visitors)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Regarding implicit duplicates, which in this case refer to users who may have been placed in different groups, we don't have any, so we can continue with our analysis without this concern."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Study the event funnel in detail\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['246', '248', '247'], dtype=object)"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file['test_id'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event\n",
       "MainScreenAppear           7439\n",
       "OffersScreenAppear         4613\n",
       "CartScreenAppear           3749\n",
       "PaymentScreenSuccessful    3547\n",
       "Tutorial                    847\n",
       "Name: user_id, dtype: int64"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.groupby('event')['user_id'].nunique().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event\n",
       "MainScreenAppear           0.985168\n",
       "OffersScreenAppear         0.610912\n",
       "CartScreenAppear           0.496491\n",
       "PaymentScreenSuccessful    0.469739\n",
       "Tutorial                   0.112171\n",
       "Name: user_id, dtype: float64"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file.groupby('event')['user_id'].nunique().sort_values(ascending=False)/log_file.user_id.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above groupby helps us to understand the flow of the product funnel, with the highest proportion of events firing on the home page screen and there being the highest amount of dropoffs at the product page, shopping cart and final purchase."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create the funnel tables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will split up the tests by counting users, events, events per user and then take the percentage dropoffs.\n",
    "Once, we've creating a table for each test we will append them into one dataframe and create a funnel chart."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_1 = log_file[log_file['test_id']=='246'].groupby(['test_id','event']).agg({'user_id': ['size','nunique']}).reset_index()\n",
    "test_2 = log_file[log_file['test_id']=='247'].groupby(['test_id','event']).agg({'user_id': ['size','nunique']}).reset_index()\n",
    "test_3 = log_file[log_file['test_id']=='248'].groupby(['test_id','event']).agg({'user_id': ['size','nunique']}).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_1.columns = ['test_id','event', 'events', 'users']\n",
    "test_2.columns = ['test_id','event', 'events', 'users']\n",
    "test_3.columns = ['test_id','event', 'events', 'users']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_1 = test_1.sort_values(by='users', ascending=False)\n",
    "test_2 = test_2.sort_values(by='users', ascending=False)\n",
    "test_3 = test_3.sort_values(by='users', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_1['event_per_user'] = test_1['events'] / test_1['users']\n",
    "test_2['event_per_user'] = test_2['events'] / test_2['users']\n",
    "test_3['event_per_user'] = test_3['events'] / test_3['users']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_id</th>\n",
       "      <th>event</th>\n",
       "      <th>events</th>\n",
       "      <th>users</th>\n",
       "      <th>event_per_user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>246</td>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>38249</td>\n",
       "      <td>2456</td>\n",
       "      <td>15.573697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>246</td>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>14904</td>\n",
       "      <td>1545</td>\n",
       "      <td>9.646602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>246</td>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>14798</td>\n",
       "      <td>1270</td>\n",
       "      <td>11.651969</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>246</td>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>11912</td>\n",
       "      <td>1202</td>\n",
       "      <td>9.910150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>246</td>\n",
       "      <td>Tutorial</td>\n",
       "      <td>318</td>\n",
       "      <td>279</td>\n",
       "      <td>1.139785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  test_id                    event  events  users  event_per_user\n",
       "1     246         MainScreenAppear   38249   2456       15.573697\n",
       "2     246       OffersScreenAppear   14904   1545        9.646602\n",
       "0     246         CartScreenAppear   14798   1270       11.651969\n",
       "3     246  PaymentScreenSuccessful   11912   1202        9.910150\n",
       "4     246                 Tutorial     318    279        1.139785"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_id</th>\n",
       "      <th>event</th>\n",
       "      <th>events</th>\n",
       "      <th>users</th>\n",
       "      <th>event_per_user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>247</td>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>39677</td>\n",
       "      <td>2482</td>\n",
       "      <td>15.985898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>247</td>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>15341</td>\n",
       "      <td>1530</td>\n",
       "      <td>10.026797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>247</td>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>12548</td>\n",
       "      <td>1240</td>\n",
       "      <td>10.119355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>247</td>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>10039</td>\n",
       "      <td>1160</td>\n",
       "      <td>8.654310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>247</td>\n",
       "      <td>Tutorial</td>\n",
       "      <td>345</td>\n",
       "      <td>286</td>\n",
       "      <td>1.206294</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  test_id                    event  events  users  event_per_user\n",
       "1     247         MainScreenAppear   39677   2482       15.985898\n",
       "2     247       OffersScreenAppear   15341   1530       10.026797\n",
       "0     247         CartScreenAppear   12548   1240       10.119355\n",
       "3     247  PaymentScreenSuccessful   10039   1160        8.654310\n",
       "4     247                 Tutorial     345    286        1.206294"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_id</th>\n",
       "      <th>event</th>\n",
       "      <th>events</th>\n",
       "      <th>users</th>\n",
       "      <th>event_per_user</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>248</td>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>41175</td>\n",
       "      <td>2501</td>\n",
       "      <td>16.463415</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>248</td>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>16563</td>\n",
       "      <td>1538</td>\n",
       "      <td>10.769181</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>248</td>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>15322</td>\n",
       "      <td>1239</td>\n",
       "      <td>12.366425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>248</td>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>12167</td>\n",
       "      <td>1185</td>\n",
       "      <td>10.267511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>248</td>\n",
       "      <td>Tutorial</td>\n",
       "      <td>355</td>\n",
       "      <td>282</td>\n",
       "      <td>1.258865</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  test_id                    event  events  users  event_per_user\n",
       "1     248         MainScreenAppear   41175   2501       16.463415\n",
       "2     248       OffersScreenAppear   16563   1538       10.769181\n",
       "0     248         CartScreenAppear   15322   1239       12.366425\n",
       "3     248  PaymentScreenSuccessful   12167   1185       10.267511\n",
       "4     248                 Tutorial     355    282        1.258865"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_1['pct_change_users']= test_1['users'].pct_change(periods=1, fill_method=None)\n",
    "test_2['pct_change_users']= test_2['users'].pct_change(periods=1, fill_method=None)\n",
    "test_3['pct_change_users']= test_2['users'].pct_change(periods=1, fill_method=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Drop the Tutorial\n",
    "\n",
    "The tutorial is not a compulory event. Therefore, does not need to be displayed in the funnel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_1 = test_1[test_1['event']!='Tutorial']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_2 = test_2[test_2['event']!='Tutorial']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_3 = test_3[test_3['event']!='Tutorial']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_funnel = pd.concat([test_1, test_2, test_3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_id</th>\n",
       "      <th>event</th>\n",
       "      <th>events</th>\n",
       "      <th>users</th>\n",
       "      <th>event_per_user</th>\n",
       "      <th>pct_change_users</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>246</td>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>38249</td>\n",
       "      <td>2456</td>\n",
       "      <td>15.573697</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>246</td>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>14904</td>\n",
       "      <td>1545</td>\n",
       "      <td>9.646602</td>\n",
       "      <td>-0.370928</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>246</td>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>14798</td>\n",
       "      <td>1270</td>\n",
       "      <td>11.651969</td>\n",
       "      <td>-0.177994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>246</td>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>11912</td>\n",
       "      <td>1202</td>\n",
       "      <td>9.910150</td>\n",
       "      <td>-0.053543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>247</td>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>39677</td>\n",
       "      <td>2482</td>\n",
       "      <td>15.985898</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>247</td>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>15341</td>\n",
       "      <td>1530</td>\n",
       "      <td>10.026797</td>\n",
       "      <td>-0.383562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>247</td>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>12548</td>\n",
       "      <td>1240</td>\n",
       "      <td>10.119355</td>\n",
       "      <td>-0.189542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>247</td>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>10039</td>\n",
       "      <td>1160</td>\n",
       "      <td>8.654310</td>\n",
       "      <td>-0.064516</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>248</td>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>41175</td>\n",
       "      <td>2501</td>\n",
       "      <td>16.463415</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>248</td>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>16563</td>\n",
       "      <td>1538</td>\n",
       "      <td>10.769181</td>\n",
       "      <td>-0.383562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>248</td>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>15322</td>\n",
       "      <td>1239</td>\n",
       "      <td>12.366425</td>\n",
       "      <td>-0.189542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>248</td>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>12167</td>\n",
       "      <td>1185</td>\n",
       "      <td>10.267511</td>\n",
       "      <td>-0.064516</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  test_id                    event  events  users  event_per_user  \\\n",
       "1     246         MainScreenAppear   38249   2456       15.573697   \n",
       "2     246       OffersScreenAppear   14904   1545        9.646602   \n",
       "0     246         CartScreenAppear   14798   1270       11.651969   \n",
       "3     246  PaymentScreenSuccessful   11912   1202        9.910150   \n",
       "1     247         MainScreenAppear   39677   2482       15.985898   \n",
       "2     247       OffersScreenAppear   15341   1530       10.026797   \n",
       "0     247         CartScreenAppear   12548   1240       10.119355   \n",
       "3     247  PaymentScreenSuccessful   10039   1160        8.654310   \n",
       "1     248         MainScreenAppear   41175   2501       16.463415   \n",
       "2     248       OffersScreenAppear   16563   1538       10.769181   \n",
       "0     248         CartScreenAppear   15322   1239       12.366425   \n",
       "3     248  PaymentScreenSuccessful   12167   1185       10.267511   \n",
       "\n",
       "   pct_change_users  \n",
       "1               NaN  \n",
       "2         -0.370928  \n",
       "0         -0.177994  \n",
       "3         -0.053543  \n",
       "1               NaN  \n",
       "2         -0.383562  \n",
       "0         -0.189542  \n",
       "3         -0.064516  \n",
       "1               NaN  \n",
       "2         -0.383562  \n",
       "0         -0.189542  \n",
       "3         -0.064516  "
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_funnel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "hoverinfo": "percent initial+percent previous",
         "textinfo": "value+percent initial+percent previous",
         "type": "funnel",
         "x": [
          2456,
          1545,
          1270,
          1202,
          2482,
          1530,
          1240,
          1160,
          2501,
          1538,
          1239,
          1185
         ],
         "y": [
          "MainScreenAppear",
          "OffersScreenAppear",
          "CartScreenAppear",
          "PaymentScreenSuccessful",
          "MainScreenAppear",
          "OffersScreenAppear",
          "CartScreenAppear",
          "PaymentScreenSuccessful",
          "MainScreenAppear",
          "OffersScreenAppear",
          "CartScreenAppear",
          "PaymentScreenSuccessful"
         ]
        }
       ],
       "layout": {
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Purchase Funnel Stages with Percentage Dropoff"
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"72f35465-f215-4cf4-acdb-eea7f643b29d\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"72f35465-f215-4cf4-acdb-eea7f643b29d\")) {                    Plotly.newPlot(                        \"72f35465-f215-4cf4-acdb-eea7f643b29d\",                        [{\"hoverinfo\":\"percent initial+percent previous\",\"textinfo\":\"value+percent initial+percent previous\",\"x\":[2456,1545,1270,1202,2482,1530,1240,1160,2501,1538,1239,1185],\"y\":[\"MainScreenAppear\",\"OffersScreenAppear\",\"CartScreenAppear\",\"PaymentScreenSuccessful\",\"MainScreenAppear\",\"OffersScreenAppear\",\"CartScreenAppear\",\"PaymentScreenSuccessful\",\"MainScreenAppear\",\"OffersScreenAppear\",\"CartScreenAppear\",\"PaymentScreenSuccessful\"],\"type\":\"funnel\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"title\":{\"text\":\"Purchase Funnel Stages with Percentage Dropoff\"}},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('72f35465-f215-4cf4-acdb-eea7f643b29d');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = go.Figure()\n",
    "fig.add_trace(go.Funnel(\n",
    "    y=test_funnel['event'],\n",
    "    x= test_funnel['users'],\n",
    "    textinfo =\"value+percent initial+percent previous\",\n",
    "    hoverinfo = \"percent initial+percent previous\",\n",
    "))\n",
    "   \n",
    "fig.update_layout(title=\"Purchase Funnel Stages with Percentage Dropoff\")\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Conclusion\n",
    "The above table and visualisation displays the drop offs in users as they go through each stage of the funnel. \n",
    "\n",
    "The offer screen had the most dropoffs at the second stage in the funnel, with around 40% of the homepage users staying only across all groups. Following from them a higher proportion of users went through the cart and almost all of the converted at the payment step, which shows positive signs for our campaign profitability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7551"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_file['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What share of users make the entire journey from their first event to payment?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "event\n",
       "MainScreenAppear           118578\n",
       "PaymentScreenSuccessful     34058\n",
       "Name: user_id, dtype: int64"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Take the first and final event of the funnel\n",
    "log_fil[log_fil['event'].isin(['MainScreenAppear','PaymentScreenSuccessful'])].groupby('event')['user_id'].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that the Main screen is the start and the payment screen is the final conversion."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"5\" halign=\"left\">nunique</th>\n",
       "      <th>completed</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>event</th>\n",
       "      <th>CartScreenAppear</th>\n",
       "      <th>MainScreenAppear</th>\n",
       "      <th>OffersScreenAppear</th>\n",
       "      <th>PaymentScreenSuccessful</th>\n",
       "      <th>Tutorial</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>test_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>246</th>\n",
       "      <td>1267</td>\n",
       "      <td>2452</td>\n",
       "      <td>1544</td>\n",
       "      <td>1200</td>\n",
       "      <td>278</td>\n",
       "      <td>0.489396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>247</th>\n",
       "      <td>1239</td>\n",
       "      <td>2479</td>\n",
       "      <td>1526</td>\n",
       "      <td>1159</td>\n",
       "      <td>285</td>\n",
       "      <td>0.467527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>1236</td>\n",
       "      <td>2498</td>\n",
       "      <td>1536</td>\n",
       "      <td>1183</td>\n",
       "      <td>282</td>\n",
       "      <td>0.473579</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 nunique                                      \\\n",
       "event   CartScreenAppear MainScreenAppear OffersScreenAppear   \n",
       "test_id                                                        \n",
       "246                 1267             2452               1544   \n",
       "247                 1239             2479               1526   \n",
       "248                 1236             2498               1536   \n",
       "\n",
       "                                         completed  \n",
       "event   PaymentScreenSuccessful Tutorial            \n",
       "test_id                                             \n",
       "246                        1200      278  0.489396  \n",
       "247                        1159      285  0.467527  \n",
       "248                        1183      282  0.473579  "
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's now find out the number of unique users at each stage by doing the nunique function instead of counting all.\n",
    "user_journeys = pd.pivot_table(log_fil, index='test_id',columns='event',values='user_id', aggfunc=['nunique'])\n",
    "user_journeys['completed'] = user_journeys[('nunique','PaymentScreenSuccessful')] / user_journeys[('nunique','MainScreenAppear')]\n",
    "user_journeys"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Conclusion/Summary\n",
    "\n",
    "- There were 49% of the users who completed the course from the first event for test from 246.\n",
    "- There was a -3% difference for group 247 with 46% proporotion of users completing the event funnel from step 1.\n",
    "- There was a 1% difference between 246 and 248 as there was a 47% proportion of users completing the event funnel form step 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### How long did it take from MainScreenAppear to PaymentScreenSuccessful?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will now determine how long it took the user to purchase to purchase. We'll first need to take out the tutorial step as this appears to be optional and could constitute a video on the final step or the homepage. \n",
    "\n",
    "Then we will calculate the first date for each event and calculate the difference between each of the two key steps Main Screen and Purchase Screen."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>CartScreenAppear</th>\n",
       "      <th>MainScreenAppear</th>\n",
       "      <th>OffersScreenAppear</th>\n",
       "      <th>PaymentScreenSuccessful</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6888746892508752</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2019-08-06 14:06:34</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6909561520679493</td>\n",
       "      <td>2019-08-06 18:52:58</td>\n",
       "      <td>2019-08-06 18:52:54</td>\n",
       "      <td>2019-08-06 18:53:04</td>\n",
       "      <td>2019-08-06 18:52:58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6922444491712477</td>\n",
       "      <td>2019-08-04 14:19:40</td>\n",
       "      <td>2019-08-04 14:19:33</td>\n",
       "      <td>2019-08-04 14:19:46</td>\n",
       "      <td>2019-08-04 14:19:40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7435777799948366</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2019-08-05 08:06:34</td>\n",
       "      <td>NaT</td>\n",
       "      <td>NaT</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7702139951469979</td>\n",
       "      <td>2019-08-02 14:28:45</td>\n",
       "      <td>2019-08-01 04:29:54</td>\n",
       "      <td>2019-08-01 04:29:56</td>\n",
       "      <td>2019-08-02 14:28:45</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "event           user_id    CartScreenAppear    MainScreenAppear  \\\n",
       "0      6888746892508752                 NaT 2019-08-06 14:06:34   \n",
       "1      6909561520679493 2019-08-06 18:52:58 2019-08-06 18:52:54   \n",
       "2      6922444491712477 2019-08-04 14:19:40 2019-08-04 14:19:33   \n",
       "3      7435777799948366                 NaT 2019-08-05 08:06:34   \n",
       "4      7702139951469979 2019-08-02 14:28:45 2019-08-01 04:29:54   \n",
       "\n",
       "event  OffersScreenAppear PaymentScreenSuccessful  \n",
       "0                     NaT                     NaT  \n",
       "1     2019-08-06 18:53:04     2019-08-06 18:52:58  \n",
       "2     2019-08-04 14:19:46     2019-08-04 14:19:40  \n",
       "3                     NaT                     NaT  \n",
       "4     2019-08-01 04:29:56     2019-08-02 14:28:45  "
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Take all of the first timestamps for each of the events.\n",
    "first_timestamp = pd.pivot_table(log_fil[log_fil['event'] != 'Tutorial'], \n",
    "                                 index='user_id', columns='event', values='timestamp', aggfunc='min').reset_index()\n",
    "first_timestamp.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "973    -6 days +01:12:57\n",
       "6590   -6 days +10:19:16\n",
       "5477   -6 days +17:44:10\n",
       "159    -6 days +22:49:35\n",
       "4035   -5 days +00:13:25\n",
       "dtype: timedelta64[ns]"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "time_elapsed = (first_timestamp['PaymentScreenSuccessful'] - first_timestamp['OffersScreenAppear'])\n",
    "time_elapsed.sort_values().head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now add the time elapsed to a column\n",
    "first_timestamp['time_elapsed'] = (first_timestamp['PaymentScreenSuccessful'] - first_timestamp['OffersScreenAppear'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a numerical columns for the data\n",
    "first_timestamp['time_elapsed'] = first_timestamp['time_elapsed'].dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>CartScreenAppear</th>\n",
       "      <th>MainScreenAppear</th>\n",
       "      <th>OffersScreenAppear</th>\n",
       "      <th>PaymentScreenSuccessful</th>\n",
       "      <th>time_elapsed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6909561520679493</td>\n",
       "      <td>2019-08-06 18:52:58</td>\n",
       "      <td>2019-08-06 18:52:54</td>\n",
       "      <td>2019-08-06 18:53:04</td>\n",
       "      <td>2019-08-06 18:52:58</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6922444491712477</td>\n",
       "      <td>2019-08-04 14:19:40</td>\n",
       "      <td>2019-08-04 14:19:33</td>\n",
       "      <td>2019-08-04 14:19:46</td>\n",
       "      <td>2019-08-04 14:19:40</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>28534696657485531</td>\n",
       "      <td>2019-08-01 18:27:59</td>\n",
       "      <td>2019-08-01 18:27:53</td>\n",
       "      <td>2019-08-01 18:28:09</td>\n",
       "      <td>2019-08-01 18:27:58</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>31467376676344061</td>\n",
       "      <td>2019-08-01 09:51:05</td>\n",
       "      <td>2019-08-01 09:51:03</td>\n",
       "      <td>2019-08-01 09:51:36</td>\n",
       "      <td>2019-08-01 09:51:05</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>34565258828294726</td>\n",
       "      <td>2019-08-02 18:21:44</td>\n",
       "      <td>2019-08-02 17:01:18</td>\n",
       "      <td>2019-08-02 18:21:46</td>\n",
       "      <td>2019-08-02 18:21:44</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7515</th>\n",
       "      <td>9198403615978777375</td>\n",
       "      <td>2019-08-01 14:25:34</td>\n",
       "      <td>2019-08-01 07:54:53</td>\n",
       "      <td>2019-08-01 14:25:50</td>\n",
       "      <td>2019-08-01 14:25:34</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7517</th>\n",
       "      <td>9202147366649120172</td>\n",
       "      <td>2019-08-02 18:53:11</td>\n",
       "      <td>2019-08-02 18:53:06</td>\n",
       "      <td>2019-08-02 18:53:20</td>\n",
       "      <td>2019-08-02 18:53:11</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7524</th>\n",
       "      <td>9211196294399965012</td>\n",
       "      <td>2019-08-03 08:47:24</td>\n",
       "      <td>2019-08-03 08:47:18</td>\n",
       "      <td>2019-08-03 08:47:33</td>\n",
       "      <td>2019-08-03 08:47:23</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7532</th>\n",
       "      <td>9216369613838971606</td>\n",
       "      <td>2019-08-02 12:05:54</td>\n",
       "      <td>2019-07-31 12:15:48</td>\n",
       "      <td>2019-08-02 12:06:12</td>\n",
       "      <td>2019-08-02 12:05:54</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7533</th>\n",
       "      <td>9217594193087726423</td>\n",
       "      <td>2019-08-02 09:00:58</td>\n",
       "      <td>NaT</td>\n",
       "      <td>2019-08-02 09:01:08</td>\n",
       "      <td>2019-08-02 09:00:57</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1328 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "event              user_id    CartScreenAppear    MainScreenAppear  \\\n",
       "1         6909561520679493 2019-08-06 18:52:58 2019-08-06 18:52:54   \n",
       "2         6922444491712477 2019-08-04 14:19:40 2019-08-04 14:19:33   \n",
       "16       28534696657485531 2019-08-01 18:27:59 2019-08-01 18:27:53   \n",
       "19       31467376676344061 2019-08-01 09:51:05 2019-08-01 09:51:03   \n",
       "27       34565258828294726 2019-08-02 18:21:44 2019-08-02 17:01:18   \n",
       "...                    ...                 ...                 ...   \n",
       "7515   9198403615978777375 2019-08-01 14:25:34 2019-08-01 07:54:53   \n",
       "7517   9202147366649120172 2019-08-02 18:53:11 2019-08-02 18:53:06   \n",
       "7524   9211196294399965012 2019-08-03 08:47:24 2019-08-03 08:47:18   \n",
       "7532   9216369613838971606 2019-08-02 12:05:54 2019-07-31 12:15:48   \n",
       "7533   9217594193087726423 2019-08-02 09:00:58                 NaT   \n",
       "\n",
       "event  OffersScreenAppear PaymentScreenSuccessful  time_elapsed  \n",
       "1     2019-08-06 18:53:04     2019-08-06 18:52:58          -1.0  \n",
       "2     2019-08-04 14:19:46     2019-08-04 14:19:40          -1.0  \n",
       "16    2019-08-01 18:28:09     2019-08-01 18:27:58          -1.0  \n",
       "19    2019-08-01 09:51:36     2019-08-01 09:51:05          -1.0  \n",
       "27    2019-08-02 18:21:46     2019-08-02 18:21:44          -1.0  \n",
       "...                   ...                     ...           ...  \n",
       "7515  2019-08-01 14:25:50     2019-08-01 14:25:34          -1.0  \n",
       "7517  2019-08-02 18:53:20     2019-08-02 18:53:11          -1.0  \n",
       "7524  2019-08-03 08:47:33     2019-08-03 08:47:23          -1.0  \n",
       "7532  2019-08-02 12:06:12     2019-08-02 12:05:54          -1.0  \n",
       "7533  2019-08-02 09:01:08     2019-08-02 09:00:57          -1.0  \n",
       "\n",
       "[1328 rows x 6 columns]"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_timestamp[first_timestamp['time_elapsed'] < 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>event</th>\n",
       "      <th>user_id</th>\n",
       "      <th>CartScreenAppear</th>\n",
       "      <th>MainScreenAppear</th>\n",
       "      <th>OffersScreenAppear</th>\n",
       "      <th>PaymentScreenSuccessful</th>\n",
       "      <th>time_elapsed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>76430713684339660</td>\n",
       "      <td>2019-07-31 12:19:59</td>\n",
       "      <td>2019-08-02 11:13:18</td>\n",
       "      <td>2019-08-03 07:12:45</td>\n",
       "      <td>2019-07-31 12:19:59</td>\n",
       "      <td>-3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "event            user_id    CartScreenAppear    MainScreenAppear  \\\n",
       "56     76430713684339660 2019-07-31 12:19:59 2019-08-02 11:13:18   \n",
       "\n",
       "event  OffersScreenAppear PaymentScreenSuccessful  time_elapsed  \n",
       "56    2019-08-03 07:12:45     2019-07-31 12:19:59          -3.0  "
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_timestamp[first_timestamp['user_id'] == 76430713684339660]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The negative times could be due to users who visited the main screen after they visited the payment screen due to openning in a new tab, or being on the payment screen for a long period of time. Therefore, we will remove the negative values from the table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3862    0.0\n",
       "4703    0.0\n",
       "4691    0.0\n",
       "4689    0.0\n",
       "4685    0.0\n",
       "       ... \n",
       "7530    NaN\n",
       "7531    NaN\n",
       "7535    NaN\n",
       "7536    NaN\n",
       "7537    NaN\n",
       "Name: time_elapsed, Length: 6210, dtype: float64"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "negative_times = first_timestamp[first_timestamp['time_elapsed'] < 0]\n",
    "first_timestamp.drop(negative_times.index, inplace=True)\n",
    "first_timestamp['time_elapsed'].sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    2207.000000\n",
       "mean        0.540100\n",
       "std         1.096066\n",
       "min         0.000000\n",
       "25%         0.000000\n",
       "50%         0.000000\n",
       "75%         1.000000\n",
       "max         7.000000\n",
       "Name: time_elapsed, dtype: float64"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_timestamp['time_elapsed'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# See the distribution from the pivot table.\n",
    "plt.hist(first_timestamp['time_elapsed'], bins=10)\n",
    "plt.title('time until conversion')\n",
    "plt.xlabel('time')\n",
    "plt.ylabel('frequancy')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The majority of our users took less than a day to complete a purchase with a small variety of users taking up to a full day before making a purchase on the website."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Study the results of the experiment (A/A1, A/B, A1/B, AA1/B)\n",
    "\n",
    "We will now perform a series of satistical tests to determine which group outperformed which.\n",
    "\n",
    "We will be testing the statistical significance between the test group (248: with new fonts) and both of our control (as we now know there will be no difference between the test.)\n",
    "\n",
    "Here we will conduct 4 tests:\n",
    "\n",
    "- 246 vs 247 (control groups A/A1)\n",
    "- 246 vs 248 (A/B)\n",
    "- 247 vs 248 (A1/B)\n",
    "- 246+247 vs 248 (AA1/)\n",
    "\n",
    "For the test, we will look at the following hypothesis, for each event and test group:\n",
    "\n",
    "- H0: There was no statistical difference between the two groups\n",
    "- H1: There was a clear difference between the events of the groups"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Take the unique users per test group\n",
    "- Firstly, let's take thew unique users from our three different groups.\n",
    "- I will use test_id as the index and do a nunique.\n",
    "- This will give us our trials which we will call in our z_test function below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>test_id</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>246</td>\n",
       "      <td>2485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>247</td>\n",
       "      <td>2517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>248</td>\n",
       "      <td>2540</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  test_id  user_id\n",
       "0     246     2485\n",
       "1     247     2517\n",
       "2     248     2540"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nu_user_id = log_fil.groupby('test_id').agg({'user_id':'nunique'}).reset_index()\n",
    "nu_user_id"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Take the unique users as they pass through the funnel\n",
    "- The below pivot table gives us the unique users per event. \n",
    "- This gives us our successes that we will call into the function below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>test_id</th>\n",
       "      <th>event</th>\n",
       "      <th>246</th>\n",
       "      <th>247</th>\n",
       "      <th>248</th>\n",
       "      <th>total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>MainScreenAppear</td>\n",
       "      <td>2452</td>\n",
       "      <td>2479</td>\n",
       "      <td>2498</td>\n",
       "      <td>7429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>OffersScreenAppear</td>\n",
       "      <td>1544</td>\n",
       "      <td>1526</td>\n",
       "      <td>1536</td>\n",
       "      <td>4606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>CartScreenAppear</td>\n",
       "      <td>1267</td>\n",
       "      <td>1239</td>\n",
       "      <td>1236</td>\n",
       "      <td>3742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PaymentScreenSuccessful</td>\n",
       "      <td>1200</td>\n",
       "      <td>1159</td>\n",
       "      <td>1183</td>\n",
       "      <td>3542</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "test_id                    event   246   247   248  total\n",
       "1               MainScreenAppear  2452  2479  2498   7429\n",
       "2             OffersScreenAppear  1544  1526  1536   4606\n",
       "0               CartScreenAppear  1267  1239  1236   3742\n",
       "3        PaymentScreenSuccessful  1200  1159  1183   3542"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "funnel=(log_fil.pivot_table(index='event', columns='test_id', values='user_id', aggfunc='nunique')\n",
    "        .reset_index()\n",
    "        .query('event !=\"Tutorial\"'))\n",
    "funnel['total'] = funnel['246']+funnel['247']+funnel['248']\n",
    "funnel=funnel.sort_values(by='total', ascending=False)\n",
    "funnel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Z Test Function\n",
    "\n",
    "<b>Step 1</b>\n",
    "- We add the parameters: trials (total unique users per group), column1 (represents the first test group from the successes pivot) and column2 (repesents the second column from the successes pivot)\n",
    "\n",
    "<b>The Loop:</b>\n",
    "- We loop over the each event and take the values for based on our chosen test groups.\n",
    "- then we will calculate the proportions of successes to trials for both test groups.\n",
    "\n",
    "<b>Step 3:</b>\n",
    "- We print here the values for each event from the pivot alongside the unique users.\n",
    "\n",
    "<b>Step 4:</b>\n",
    "\n",
    "Combined data: \n",
    "- The next step is to sum up both trials and successes and take the proportion.\n",
    "\n",
    "Statistical test:\n",
    "- Differences tells us how much the groups differ from each other (p1 - p2), Taking the difference between the proportions\n",
    "- p_compinbed helps us to measure the variability in the data\n",
    "- Calculate the Z Value tells us how many standard deviations the difference between the groups is from what you would expect. Then when we print the results, if the z_value is larg than there is a statisical significance.\n",
    "\n",
    "Output:\n",
    "- We will then print whether or not the pvalue is less than the alpha and whether we reject the null hypothesis or not."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.stats as stats\n",
    "def z_test(array, trials, column1, column2):\n",
    "    for i in range(0, 4):\n",
    "        successes = np.array([array.loc[i, column1], array.loc[i, column2]])        \n",
    "        p1 = successes[0]/trials[0]        \n",
    "        p2 = successes[1]/trials[1]\n",
    "        \n",
    "        # \n",
    "        print(successes[0], successes[1],trials[0], trials[1])\n",
    "        \n",
    "        # The next step is to sum up and take the proportion from all groups\n",
    "        p_combined = (successes[0] + successes[1]) / (trials[0] + trials[1])       \n",
    "        difference = p1 - p2     \n",
    "        # Assess the statisticual significance using the z_value statistical function\n",
    "        z_value = difference / mth.sqrt(p_combined * (1 - p_combined) * (1/trials[0] + 1/trials[1]))       \n",
    "        distr = stats.norm(0, 1)        \n",
    "        p_value = (1 - distr.cdf(abs(z_value))) * 2   \n",
    "        alpha = 0.05 \n",
    "        print('{} p-value: {}'.format(funnel['event'][i], p_value))\n",
    "        if p_value < alpha:\n",
    "            print('We reject the null hypothesis: There was a clear difference between the successful events of the groups')\n",
    "        else:\n",
    "            print('There was no statistical difference between the success rate of the two groups')\n",
    "        print('')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Statistical Test Results"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### A/A1 test - The control groups\n",
    "\n",
    "From the results below, we know that the main screen was the most popular event and the statistical significance between the groups accross all the events was insignificant. This was exactly what the product and marketing expected, which shows that both groups are suitable for comparision against our test group where the team adjusted the fonts."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1267 1239 2485 2517\n",
      "CartScreenAppear p-value: 0.21306131796590932\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "2452 2479 2485 2517\n",
      "MainScreenAppear p-value: 0.5868776836512959\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "1544 1526 2485 2517\n",
      "OffersScreenAppear p-value: 0.2743505991932964\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "1200 1159 2485 2517\n",
      "PaymentScreenSuccessful p-value: 0.11210845100173072\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# The control group test.#А/А1\n",
    "trials = np.array([nu_user_id.loc[0, 'user_id'], nu_user_id.loc[1, 'user_id']])\n",
    "z_test(funnel, trials, '246','247')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The A/B (control group 1 vs. test group)\n",
    "\n",
    "From the results below, we can see that there was know significant difference between 3 out of 4 events, which the home page having more events. Therefore, suggesting that for the test group there were slightly more visitors entering the website."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1267 1236 2485 2517\n",
      "CartScreenAppear p-value: 0.1836882061117231\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "2452 2498 2485 2517\n",
      "MainScreenAppear p-value: 0.04571267773459464\n",
      "We reject the null hypothesis: There was a clear difference between the successful events of the groups\n",
      "\n",
      "1544 1536 2485 2517\n",
      "OffersScreenAppear p-value: 0.4206301970781001\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "1200 1183 2485 2517\n",
      "PaymentScreenSuccessful p-value: 0.36130452637373667\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# The control group 2 against the altered fonts test. (A/B)\n",
    "trials = np.array([nu_user_id.loc[0, 'user_id'], nu_user_id.loc[1, 'user_id']])\n",
    "z_test(funnel, trials, '246', '248')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The A1/B test (control group 2 vs. test group) \n",
    "\n",
    "Like the above results, we can also see that there was a statistical significance between the events fired on the homepage for the test group than the control groups, which resulted in their being a statistical significance for these events. Therefore, it could have been that the marketing campaigns teams increased the budget or changed their optimisation for test group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1239 1236 2485 2517\n",
      "CartScreenAppear p-value: 0.5942899339015177\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "2479 2498 2485 2517\n",
      "MainScreenAppear p-value: 0.01003830260426053\n",
      "We reject the null hypothesis: There was a clear difference between the successful events of the groups\n",
      "\n",
      "1526 1536 2485 2517\n",
      "OffersScreenAppear p-value: 0.7808136650520889\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "1159 1183 2485 2517\n",
      "PaymentScreenSuccessful p-value: 0.7983247062909817\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Looking at the results of the control group 247 and group 248.\n",
    "trials = np.array([nu_user_id.loc[0, 'user_id'], nu_user_id.loc[1, 'user_id']])\n",
    "z_test(funnel, trials, '247','248')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### AA1/B test: Statistical significance between both groups and the test group\n",
    "\n",
    "Despite, what we said above, when we combined both control groups for the AA1/B test, there is no statistical significance between the test group and control groups. Therefore, we can say that there was no bias between the campaign optimisation for each group."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2506 1236 5002 2540\n",
      "CartScreenAppear p-value: 0.23764471031415635\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "4931 2498 5002 2540\n",
      "MainScreenAppear p-value: 0.42897263461182167\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "3070 1536 5002 2540\n",
      "OffersScreenAppear p-value: 0.4471809415681398\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n",
      "2359 1183 5002 2540\n",
      "PaymentScreenSuccessful p-value: 0.629668311887492\n",
      "There was no statistical difference between the success rate of the two groups\n",
      "\n"
     ]
    }
   ],
   "source": [
    "trials_a_aa1 = np.array([nu_user_id.loc[0, 'user_id'] + nu_user_id.loc[1, 'user_id'], nu_user_id.loc[2, 'user_id']])\n",
    "funnel['AA1'] = funnel['246'] + funnel['247']\n",
    "z_test(funnel, trials_a_aa1, 'AA1', '248')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusion and Business Recommendations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Conclusion\n",
    "\n",
    "- Firstly, we filtered our core dataset to cut out the campaign dates where the IT and Development teams were testings the application (after 31st July, when traffic started). These only turned into a 1% loss of data so it will have no affect on our analysis.\n",
    "- Our outliers in the data, showed users interactiving and exceeding over 80 events. Suggesting that there was a high bounce rate and not enough users completion meaningful actions on the website. \n",
    "- The core data was without outliers was users with 10 to 37 events\n",
    "- There were no duplicates, problems with missing values and no implicit duplicates (users in more than one group)\n",
    "- There was no statistical significance between the control groups and this is what we had expected to see to ensure there is no bias\n",
    "- There was also only a statistical significance between the ho0me page events in both the control groups and the test group. Possibly due to an increased number of visitors to the new test group.\n",
    "\n",
    "When we compare the funnel, we noticed that there was a:\n",
    "- There were 49% of the users who completed the course from the first event for test from 246.\n",
    "- There was a -3% difference for group 247 with 46% proporotion of users completing the event funnel from step 1.\n",
    "- There was a 1% difference between 246 and 248 as there was a 47% proportion of users completing the event funnel form step 1.\n",
    "\n",
    "The conversion rate for each test group was stable and the majority of the users who visiting the product offering went to the cart page and continued to purchase. 90% of the users went from the cart to complete the payment, meaning that there was a cart abandonment rate of 10%.\n",
    "\n",
    "\n",
    "### Business Recommendations\n",
    "\n",
    "- We need to focus on optimising our user engagement to ensure there's no more than 10-37 events committed during a session.\n",
    "- Focus on improving the calls to action on the home page to drive more traffic to product offerings.\n",
    "- There is no need to consider font changes as they don't impact user behavior enough to warrant the hours of work.\n",
    "- Making too many drastic changes may damage the user experience and reduce our online success rate."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "557.396px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
